// use anyhow::Result;
use std::{collections::HashMap, path::PathBuf};

use anyhow::{anyhow, Result};
use clap::{Parser, Subcommand, ValueEnum};
use dirs::home_dir;
use serde::{Deserialize, Serialize};

const FILE_NAME: &str = ".markmedium";

/// Publish Medium articles from markdown content
#[derive(Parser)]
#[command(author, version, about, long_about = None, arg_required_else_help(true))]
struct Args {
    #[command(subcommand)]
    command: Option<Commands>,
}

#[derive(Subcommand)]
enum Commands {
    /// Set up with your integration token
    Init { token: String },
    /// Publish markdown content on your Medium blog
    Publish {
        file: PathBuf,

        #[arg(long)]
        title: String,

        #[arg(long)]
        tags: Option<Vec<String>>,

        #[arg(long = "canonical")]
        canonical_url: Option<String>,

        #[arg(value_enum, short = 's', long = "status", default_value_t = PublishStatus::Public)]
        publish_status: PublishStatus,
    },
}

#[derive(Debug, Serialize, Deserialize)]
struct MediumUser {
    id: String,
}

#[derive(Debug, Serialize, Deserialize)]
struct MediumUserResponse {
    data: MediumUser,
}

#[derive(Debug, Deserialize, ValueEnum, Clone)]
enum PublishStatus {
    Public,
    Draft,
    Unlisted,
}

#[derive(Serialize, Deserialize)]
struct ApiConfig {
    token: String,
    id: String,
}

struct PublishMetadata {
    title: String,
    tags: Option<Vec<String>>,
    canonical_url: Option<String>,
    publish_status: PublishStatus,
}

#[derive(Deserialize)]
struct PublishedPost {
    url: String,
}

#[derive(Deserialize)]
struct PublishResponse {
    data: PublishedPost,
}

#[derive(Debug, Serialize, Deserialize)]
struct ErrorBody {
    message: String,
}

#[derive(Debug, Serialize, Deserialize)]
struct ErrorResponse {
    errors: Vec<ErrorBody>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(untagged)]
enum ResponseType {
    Ok(MediumUserResponse),
    Err(ErrorResponse),
}

async fn init(token: &String) -> anyhow::Result<PathBuf> {
    let file_path = home_dir().unwrap().join(FILE_NAME);
    let response: reqwest::Response = reqwest::Client::new()
        .get("https://api.medium.com/v1/me")
        .bearer_auth(token)
        .send()
        .await?;

    let response: ResponseType = response.json().await?;

    match response {
        ResponseType::Ok(user_response) => {
            println!("response, {:?}", &user_response);
            let user_data = user_response.data;

            let config = ApiConfig {
                token: token.to_string(),
                id: user_data.id,
        };

            let json_config = serde_json::to_string(&config)?;

            std::fs::write(file_path.clone(), json_config)?;
            Ok(file_path)
        }
        ResponseType::Err(error_response) => {
            Err(anyhow!(error_response.errors[0].message.to_owned()))
        }
    }
}

fn read_config() -> Result<ApiConfig> {
    let file_path = home_dir().unwrap().join(FILE_NAME);
    let text: String = std::fs::read_to_string(file_path)?;
    let config: ApiConfig = serde_json::from_str(&text)?;
    Ok(config)
}

async fn publish(mdfile: PathBuf, metadata: PublishMetadata) -> Result<String, anyhow::Error> {
    let config = read_config()?;
    let content = std::fs::read_to_string(mdfile)?;

    let mut body = HashMap::new();

    body.insert("title", metadata.title);
    body.insert("contentFormat", "markdown".into());
    body.insert("content", content);
    body.insert("publishStatus", format!("{:?}", metadata.publish_status));

    if let Some(tags) = metadata.tags {
        body.insert("tags", serde_json::to_string(&tags)?);
    }

    if let Some(canonical_url) = metadata.canonical_url {
        body.insert("canonicalUrl", canonical_url);
    }

    let response: PublishResponse = reqwest::Client::new()
        .post(format!(
            "https://api.medium.com/v1/users/{}/posts",
            config.id
        ))
        .bearer_auth(config.token)
        .json(&body)
        .send()
        .await?
        .json()
        .await?;
    Ok(response.data.url)
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args = Args::parse();

    match &args.command {
        Some(Commands::Init { token }) => {
            let file_path = init(token).await?;
            println!("Saved token and author ID at {}", file_path.display());
        }
        Some(Commands::Publish {
            file,
            title,
            tags,
            canonical_url,
            publish_status,
        }) => {
            let url = publish(
                file.to_owned(),
                PublishMetadata {
                    title: title.to_owned(),
                    tags: tags.to_owned(),
                    canonical_url: canonical_url.to_owned(),
                    publish_status: publish_status.to_owned(),
                },
            )
            .await?;

            println!("Done! Your post has been published at {}", url);
        }
        None => {}
    }

    Ok(())
}
